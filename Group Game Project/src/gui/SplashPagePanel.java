package gui;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.Box;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;

import render.CreateGameWorld;
import render.RenderPanel;

/**
 *
 * This class is responsible for setting up the splash box when the game starts.
 * It generates a jPanel that has options to connect to a server or start your own server.
 *
 * @author Andrew Booker 300260693
 *
 */

public class SplashPagePanel extends JPanel {
	private ConnectAction callback;
    private javax.swing.Box.Filler filler;
    private JButton resetButton;
    private JTextField ipText;
    private JButton connectButton;
    private JButton cancelButton;
    private JLabel playerNameLabel;
    private JLabel portTextLabel;
    private JLabel urlText;
    private JTextField playerName;
    private JTextField portText;
    private JButton startServer;
	private JFrame parentFrame;
	private static final long serialVersionUID = 1L;



	/**
     * Creates new form NewJPanel
     *
     * @param callback this require a ConnectAction
     */
    public SplashPagePanel(ConnectAction callback, JFrame window) {
    	this.parentFrame= window;
    	this.callback = callback;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the panel.
     *
     */

    private void initComponents() {

        initVaribles();

        setUpComponents();

        generateLayout();
    }

	private void initVaribles() {
		portTextLabel = new JLabel();
        ipText = new JTextField();
        filler = new Box.Filler(new Dimension(5, 0), new Dimension(5, 0), new Dimension(5, 32767));
        portText = new JTextField();
        urlText = new JLabel();
        connectButton = new JButton();
        cancelButton = new JButton();
        playerName = new JTextField();
        playerNameLabel = new JLabel();
        resetButton = new JButton();
        startServer = new JButton();
	}

	private void setUpComponents() {
		portTextLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        portTextLabel.setText("Port:");

        ipText.setText("localhost");

        portText.setText("3333");

        urlText.setHorizontalAlignment(SwingConstants.RIGHT);
        urlText.setText("IP:");

        connectButton.setText("Connect");
        connectButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        playerName.setText("Dave");

        playerNameLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        playerNameLabel.setText("Player Name:");

        resetButton.setText("Create New Game");
        resetButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        startServer.setText("Start Server ");
        startServer.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                startServerActionPerformed(evt);
            }
        });
	}

    /**
     *	IMPORTANT
     * This Method was generated by a GUT SWING EDITOR
     * It is responisble for generating the layout of the JPanel
     *
     *
     */
	private void generateLayout() {
		GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(filler, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(portTextLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(urlText, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(playerNameLabel, GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(startServer, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(resetButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(playerName, GroupLayout.Alignment.TRAILING)
                                .addComponent(ipText)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(connectButton)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cancelButton))
                                .addComponent(portText)))))
                .addGap(224, 224, 224))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(playerNameLabel)
                            .addComponent(playerName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(urlText)
                            .addComponent(ipText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(filler, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(98, 98, 98)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(portText, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(portTextLabel))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(connectButton))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetButton)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startServer)
                .addGap(74, 74, 74))
        );
	}


	/***
	 *
	 * This method is responsible for handling what happens when the connect button is pushed on the SpalshPage
	 *
	 * @param evt
	 */
    private void connectActionPerformed(ActionEvent evt) {
    	StartClient s =  new StartClient(ipText.getText(), new Integer(portText.getText()),playerName.getText(),"Player Description");
    	parentFrame.dispose();
    }
/***
 * this handles the events when the cancel button is press
 *
 * @param evt
 */
    private void cancelActionPerformed(ActionEvent evt) {
    	parentFrame.dispose();
    }

/**
 *
 * This handles the events if the reset button is pressed
 *
 * @param evt
 */
    private void resetButtonActionPerformed(ActionEvent evt) {

    	CreateGameWorld.writeOut();

    }

   /**
    * This method is responsible for handliing what happens when the connect to server button is pushed on the SpalshPage
    *
    * @param evt
    */

    private void startServerActionPerformed(ActionEvent evt) {
    	callback.startServer(Integer.valueOf(portText.getText()));
    	boolean confirmBox = JOptionPane.showConfirmDialog(this,"Would you like to connect to the server?", "Server Created",JOptionPane.YES_NO_OPTION, 0, new ImageIcon("")) == JOptionPane.YES_OPTION;
//    	if(confirmBox)
//    	{
//    		connectActionPerformed(null);
//    	}
    }
}







